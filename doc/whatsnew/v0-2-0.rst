v0.2.0 ()
++++++++++++++++++++++++++


API changes
###########

* The `NodesFromCSV` has been removed from the code base. An alternative way
  is provided in the newly created
  `oemof_examples repository <https://github.com/oemof/oemof_examples>`_.
* LinearTransformer and LinearN1Transformer classes are now combined within one
  Transformer class. The new class has n inputs and n outputs. Please note that
  the definition of the conversion factors has changed. See the new docstring
  to avoid errors (`Issue #351 <https://github.com/oemof/oemof/issues/351>`_).
* OperationalModel has been renamed to Model.
* :class:`Nodes <oemof.network.Node>` are no longer automatically added to the
  most recently created :class:`energy system
  <oemof.energy_system.EnergySystem>`. You can still restore the old automatic
  registration by manually assigning an :class:`energy system
  <oemof.energy_system.EnergySystem>` to :attr:`Node.registry
  <oemof.network.Node.registry>`. On the other hand you can still explicitly
  :meth:`add <oemof.energy_system.EnergySystem.add>` :class:`nodes
  <oemof.network.Node>` to an :class:`energy system
  <oemof.energy_system.EnergySystem>`. This option has been made a bit more
  feature rich by the way, but see below for more on this.
  Also check the
  `oemof_examples repository <https://github.com/oemof/oemof_examples>`_
  for more information on the usage.
* The `fixed_costs` attribute of the  :class:`nodes <oemof.solph.network.Flow>`
  has been removed. See
  (`Issue #407 <https://github.com/oemof/oemof/issues/407>`_) for more
  information.
* The classes :class:`DataFramePlot <outputlib.DataFramePlot>` and
  :class:`ResultsDataFrame <outputlib.ResultsDataFrame>` have been removed
  due to the redesign of the outputlib module.

New features
############

* A new outputlib module has been created to provide a convenient data structure
  for optimization results and enable quick analyses.
  All decision variables of a Node are now collected automatically which
  enables an easier development of custom components.
  Have a look at the
  `oemof_examples repository <https://github.com/oemof/oemof_examples>`_
  for information on the usage.
* A module to draw and plot energy system graphs using networkx has been created
  within the tools module.
* It's now possible to modify a :class:`node <oemof.network.Node>`'s
  :attr:`inputs <oemof.network.Node.inputs>` and `outputs
  <oemof.network.Node.outputs>` by inserting and removing :class:`node
  <oemof.network.Node>`s to and from the correspoding dictionaries.
  :attr:`Outputs <oemof.network.Node.outputs>` where already working
  previously, but due to an implementation quirk, :attr:`inputs
  <oemof.network.Node.inputs>` did not behave as expected. This is now fixed.
* One can now explicitly :meth:`add <oemof.energy_system.EnergySystem.add>`
  :class:`nodes <oemof.network.Node>` to an :class:`energy system
  <oemof.energy_system.EnergySystem>` in bulk using `*` and `**` syntax. For
  the latter case, the :meth:`values <dict.values>` of the dictionary passed in
  will be added.

New components
##############

* The nodes :class:`ElectricalLine <oemof.solph.custom.ElectricalLine>`
  and :class:`ElectricalBus <oemof.solph.custom.ElectricalBus>` can be used
  for Linear Optimal Powerflow calculation based on angle formulations.
  These components have been added to the `solph.custom.py` module.
  Though it should work correctly, it is in a preliminary stage.
  Please check your results. Feedback is welcome!
* The component :class:`Link <oemof.solph.custom.Link>` can now be used to model
  a bidirectional connection within one component. Check out the example in the
  `oemof_examples repository <https://github.com/oemof/oemof_examples>`_.
* The component :class:`GenericCHP <oemof.solph.components.GenericCHP>` can be
  used to model different CHP types such as extraction or back-pressure turbines
  and motoric plants. The component uses a mixed-integer linear formulation and
  can be adapted to different technical layouts with a high level of detail.
* The component :class:`GenericCAES <oemof.solph.custom.GenericCAES>` can be
  used to model different concepts of compressed air energy storage. Technical
  concepts such as diabatic or adiabatic layouts can be modelled at a high level
  of detail. The component uses a mixed-integer linear formulation.
* The component
  :class:`GenericOffsetTransformer <oemof.solph.custom.GenericOffsetTransformer>`
  can be used to model components with load ranges such as heat pumps and also
  uses a mixed-integer linear formulation.

Documentation
#############

* Large parts of the documentation have been proofread and improved.

Bug fixes
#########

* LP-file tests are now invariant against sign changes in equations, because
  the equations are now normalized to always have non-negative right hand
  sides.

Testing
#######

* All known and newly created components are now tested within an independent
  testing environment which can be found in `/tests/test_scripts/test_solph`.
* Other testing routines have been streamlined and reviewed.

Other changes
#############

* The plot functionalities have been removed completely from the outputlib as
  they are less a necessary part but more an optional tool .
  Basic plotting examples that show how to quickly create plots from
  optimization results can now be found in the
  `oemof_examples repository <https://github.com/oemof/oemof_examples>`_.
  You can still find the "old" standard plots within the oemof_visio repository
  `oemof_visio <https://github.com/oemof/oemof_visio>`_ as they are now
  maintained separately.

Contributors
############

* Cord Kaldemeyer
* Stephan GÃ¼nther
* Simon Hilpert
* Uwe Krien
* Jens-Olaf Delfs
